//: [Previous](@previous)

import Foundation

func solution(_ board:[[Int]], _ moves:[Int]) -> Int {
    
    var array = board
    
    // 크레인이 1번 이하로 움직이면 터진 인형의 개수는 무의미
    if moves.count < 2 { return 0 }
    
    var bucket: [Int] = []          // 뽑힌 인형을 담을 버켓
    var exploredDolls: Int = 0      // 터진 인형의 개수를 카운팅할 변수
    
    for i in 0..<moves.count {      // 사건의 경우는 크레인의 움직인 횟수가 좌우한다.
        
        let position: Int = moves[i] - 1            // 크레인의 위치는 1부터 n까지이지만 배열의 인덱스는 0부터 n-1 까지. 그래서 -1 을 해준다.
        
        if bucket.count > 1 {
            print("Check")
            print("\(i)번째 시도 ", bucket[bucket.count - 1])
            print("\(i)번째 시도 ", bucket[bucket.count - 2])
            print("버켓의 아이템 ", bucket)
            if bucket[bucket.count - 1] == bucket[bucket.count - 2] {
                print("삭제된 끝 인덱스 1 ", bucket[bucket.count - 1])
                print("삭제된 끝 인덱스 2 ", bucket[bucket.count - 2])
                bucket.removeLast()
                bucket.removeLast()
                
                print("Check")
                exploredDolls += 2
            }
        }
        
        for n in 0..<array.count {                  // 위치를 기반으로 보드 내의 모든 배열의 특정 인덱스에 접근해야한다.
            if array[n][position] != 0 {            // [각 배열] + [특정 위치]
                bucket.append(array[n][position])   // 빈 경우인 0을 제외한 경우가 발견되면 추가
                array[n][position] = 0
                break                               // 종료
            }
        }

    }
    
    return exploredDolls
}

solution([[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]], [1,5,3,5,1,2,1,4])


//: [Next](@next)
[[0,0,0,0,0],
 [0,0,1,0,3],
 [0,2,5,0,1],
 [4,2,4,4,2],
 [3,5,1,3,1]]

[1,5,3,5,1,2,1,4]

// 1회 : 4 (기존 4는 0) 결과 : [4]

[0,0,0,0,0]
[0,0,1,0,3]
[0,2,5,0,1]
[0,2,4,4,2]
[3,5,1,3,1]

// 2회 : 3 결과 : [4, 3]

[0,0,0,0,0]
[0,0,1,0,0]
[0,2,5,0,1]
[0,2,4,4,2]
[3,5,1,3,1]

// 3회 : 1 결과 : [4, 3, 1]

[0,0,0,0,0]
[0,0,0,0,0]
[0,2,5,0,1]
[0,2,4,4,2]
[3,5,1,3,1]

// 4회 : 1 결과 : [4, 3, 1, 1] -> 중복 펑 -> [4, 3]

[0,0,0,0,0]
[0,0,0,0,0]
[0,2,5,0,0]
[0,2,4,4,2]
[3,5,1,3,1]

// 5회 : 3 결과 : [4, 3, 3] -> 중복 펑 -> [4]

[0,0,0,0,0]
[0,0,0,0,0]
[0,2,5,0,0]
[0,2,4,4,2]
[0,5,1,3,1]

// 6회 : 2 결과 : [4, 2]

[0,0,0,0,0]
[0,0,0,0,0]
[0,0,5,0,0]
[0,2,4,4,2]
[0,5,1,3,1]

// 7회 : X 결과 : [4, 2]

[0,0,0,0,0]
[0,0,0,0,0]
[0,0,5,0,0]
[0,2,4,4,2]
[0,5,1,3,1]

// 8회 : 4 결과 : [4, 2, 4]

[0,0,0,0,0]
[0,0,0,0,0]
[0,0,5,0,0]
[0,2,4,0,2]
[0,5,1,3,1]

// 총 사라진 인형 갯수 : 4개
